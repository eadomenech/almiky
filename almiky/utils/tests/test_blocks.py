'''
Tests for utility module
'''

from unittest import TestCase
from unittest.mock import MagicMock

import numpy as np

from almiky.utils.blocks import BlocksImage


class BlockImageTest(TestCase):
    '''
    Test for BlockImage class
    '''

    def test_init_default_dimension(self):
        image = MagicMock()
        block_manager = BlocksImage(image)
        self.assertEqual(block_manager.matrix, image)
        self.assertEqual(block_manager.size_block_rows, 8)
        self.assertEqual(block_manager.size_block_cols, 8)

    def test_init_custom_dimension(self):
        image = MagicMock()
        block_manager = BlocksImage(image, 4, 8)
        self.assertEqual(block_manager.matrix, image)
        self.assertEqual(block_manager.size_block_rows, 4)
        self.assertEqual(block_manager.size_block_cols, 8)

    def test_get_first_block(self):
        image = np.array([
            [0.72996436, 0.30220469, 0.26302874, 0.45926106, 0.83229292,
                0.36547379, 0.04903042, 0.80401489],
            [0.95165122, 0.0834489, 0.6329711, 0.70563593, 0.30838541,
                0.85019345, 0.82915152, 0.66390158],
            [0.73101532, 0.48981373, 0.23543479, 0.34432725, 0.64965507,
                0.56053218, 0.87013326, 0.31057878],
            [0.25541202, 0.7590065, 0.34833583, 0.87539685, 0.15707788,
                0.12932102, 0.82317562, 0.27748149],
            [0.12185236, 0.46868408, 0.95256657, 0.11167148, 0.14111763,
                0.20679031, 0.38810133, 0.86408796],
            [0.22420372, 0.69550787, 0.97781245, 0.65326647, 0.86442453,
                0.82161094, 0.09722554, 0.69971431],
            [0.08751724, 0.77511339, 0.77809499, 0.31933827, 0.24950535,
                0.83073389, 0.35378153, 0.24732298],
            [0.17390554, 0.83968645, 0.35554425, 0.83599189, 0.87064086,
                0.84453971, 0.96192682, 0.79401981]
        ])

        block = np.array([
            [0.72996436, 0.30220469],
            [0.95165122, 0.0834489],
        ])

        blocks = BlocksImage(image, 2, 2)

        np.testing.assert_array_equal(blocks[0], block)

    def test_get_middle_block(self):
        image = np.array([
            [0.72996436, 0.30220469, 0.26302874, 0.45926106, 0.83229292,
                0.36547379, 0.04903042, 0.80401489],
            [0.95165122, 0.0834489, 0.6329711, 0.70563593, 0.30838541,
                0.85019345, 0.82915152, 0.66390158],
            [0.73101532, 0.48981373, 0.23543479, 0.34432725, 0.64965507,
                0.56053218, 0.87013326, 0.31057878],
            [0.25541202, 0.7590065, 0.34833583, 0.87539685, 0.15707788,
                0.12932102, 0.82317562, 0.27748149],
            [0.12185236, 0.46868408, 0.95256657, 0.11167148, 0.14111763,
                0.20679031, 0.38810133, 0.86408796],
            [0.22420372, 0.69550787, 0.97781245, 0.65326647, 0.86442453,
                0.82161094, 0.09722554, 0.69971431],
            [0.08751724, 0.77511339, 0.77809499, 0.31933827, 0.24950535,
                0.83073389, 0.35378153, 0.24732298],
            [0.17390554, 0.83968645, 0.35554425, 0.83599189, 0.87064086,
                0.84453971, 0.96192682, 0.79401981]
        ])

        block = np.array([
            [0.95256657, 0.11167148],
            [0.97781245, 0.65326647],
        ])

        blocks = BlocksImage(image, 2, 2)

        np.testing.assert_array_equal(blocks[9], block)

    def test_get_last_block(self):
        image = np.array([
            [0.72996436, 0.30220469, 0.26302874, 0.45926106, 0.83229292,
                0.36547379, 0.04903042, 0.80401489],
            [0.95165122, 0.0834489, 0.6329711, 0.70563593, 0.30838541,
                0.85019345, 0.82915152, 0.66390158],
            [0.73101532, 0.48981373, 0.23543479, 0.34432725, 0.64965507,
                0.56053218, 0.87013326, 0.31057878],
            [0.25541202, 0.7590065, 0.34833583, 0.87539685, 0.15707788,
                0.12932102, 0.82317562, 0.27748149],
            [0.12185236, 0.46868408, 0.95256657, 0.11167148, 0.14111763,
                0.20679031, 0.38810133, 0.86408796],
            [0.22420372, 0.69550787, 0.97781245, 0.65326647, 0.86442453,
                0.82161094, 0.09722554, 0.69971431],
            [0.08751724, 0.77511339, 0.77809499, 0.31933827, 0.24950535,
                0.83073389, 0.35378153, 0.24732298],
            [0.17390554, 0.83968645, 0.35554425, 0.83599189, 0.87064086,
                0.84453971, 0.96192682, 0.79401981]
        ])

        block = np.array([
            [0.35378153, 0.24732298],
            [0.96192682, 0.79401981],
        ])

        blocks = BlocksImage(image, 2, 2)

        np.testing.assert_array_equal(blocks[15], block)

    def test_get_block_out_of_range(self):
        image = np.array([
            [0.72996436, 0.30220469, 0.26302874, 0.45926106, 0.83229292,
                0.36547379, 0.04903042, 0.80401489],
            [0.95165122, 0.0834489, 0.6329711, 0.70563593, 0.30838541,
                0.85019345, 0.82915152, 0.66390158],
            [0.73101532, 0.48981373, 0.23543479, 0.34432725, 0.64965507,
                0.56053218, 0.87013326, 0.31057878],
            [0.25541202, 0.7590065, 0.34833583, 0.87539685, 0.15707788,
                0.12932102, 0.82317562, 0.27748149],
            [0.12185236, 0.46868408, 0.95256657, 0.11167148, 0.14111763,
                0.20679031, 0.38810133, 0.86408796],
            [0.22420372, 0.69550787, 0.97781245, 0.65326647, 0.86442453,
                0.82161094, 0.09722554, 0.69971431],
            [0.08751724, 0.77511339, 0.77809499, 0.31933827, 0.24950535,
                0.83073389, 0.35378153, 0.24732298],
            [0.17390554, 0.83968645, 0.35554425, 0.83599189, 0.87064086,
                0.84453971, 0.96192682, 0.79401981]
        ])

        blocks = BlocksImage(image, 2, 2)

        with self.assertRaises(IndexError, msg="There is no such block"):
            blocks[16]

    def test_set_block(self):
        image = np.array([
            [0.72996436, 0.30220469, 0.26302874, 0.45926106, 0.83229292,
                0.36547379, 0.04903042, 0.80401489],
            [0.95165122, 0.0834489, 0.6329711, 0.70563593, 0.30838541,
                0.85019345, 0.82915152, 0.66390158],
            [0.73101532, 0.48981373, 0.23543479, 0.34432725, 0.64965507,
                0.56053218, 0.87013326, 0.31057878],
            [0.25541202, 0.7590065, 0.34833583, 0.87539685, 0.15707788,
                0.12932102, 0.82317562, 0.27748149],
            [0.12185236, 0.46868408, 0.95256657, 0.11167148, 0.14111763,
                0.20679031, 0.38810133, 0.86408796],
            [0.22420372, 0.69550787, 0.97781245, 0.65326647, 0.86442453,
                0.82161094, 0.09722554, 0.69971431],
            [0.08751724, 0.77511339, 0.77809499, 0.31933827, 0.24950535,
                0.83073389, 0.35378153, 0.24732298],
            [0.17390554, 0.83968645, 0.35554425, 0.83599189, 0.87064086,
                0.84453971, 0.96192682, 0.79401981]
        ])

        new_block = np.array([
            [0.4949508, 0.46024612],
            [0.83870684, 0.36445031]
        ])
        modified_image = np.copy(image)
        modified_image[4, 2] = 0.4949508
        modified_image[4, 3] = 0.46024612
        modified_image[5, 2] = 0.83870684
        modified_image[5, 3] = 0.36445031

        blocks = BlocksImage(image, 2, 2)
        blocks[9] = new_block

        np.testing.assert_array_equal(image, modified_image)

    def test_set_block_out_of_range(self):
        image = np.array([
            [0.72996436, 0.30220469, 0.26302874, 0.45926106, 0.83229292,
                0.36547379, 0.04903042, 0.80401489],
            [0.95165122, 0.0834489, 0.6329711, 0.70563593, 0.30838541,
                0.85019345, 0.82915152, 0.66390158],
            [0.73101532, 0.48981373, 0.23543479, 0.34432725, 0.64965507,
                0.56053218, 0.87013326, 0.31057878],
            [0.25541202, 0.7590065, 0.34833583, 0.87539685, 0.15707788,
                0.12932102, 0.82317562, 0.27748149],
            [0.12185236, 0.46868408, 0.95256657, 0.11167148, 0.14111763,
                0.20679031, 0.38810133, 0.86408796],
            [0.22420372, 0.69550787, 0.97781245, 0.65326647, 0.86442453,
                0.82161094, 0.09722554, 0.69971431],
            [0.08751724, 0.77511339, 0.77809499, 0.31933827, 0.24950535,
                0.83073389, 0.35378153, 0.24732298],
            [0.17390554, 0.83968645, 0.35554425, 0.83599189, 0.87064086,
                0.84453971, 0.96192682, 0.79401981]
        ])

        new_block = np.array([
            [0.4949508, 0.46024612],
            [0.83870684, 0.36445031]
        ])

        blocks = BlocksImage(image, 2, 2)

        with self.assertRaises(IndexError, msg="There is no such block"):
            blocks[16] = new_block

    def test_block_image_is_iterable(self):
        '''
        Test capacity of iterate over the blocks.
        '''
        image = np.array([
            [0.98838329, 0.92974977, 0.40523466, 0.41932678],
            [0.40426586, 0.44543487, 0.67170983, 0.46135769],
            [0.85925337, 0.59646605, 0.38249919, 0.8737707],
            [0.85925337, 0.59646605, 0.45148745, 0.79845514]
        ])

        expected = [
            np.array([
                [0.98838329, 0.92974977],
                [0.40426586, 0.44543487]
            ]),
            np.array([
                [0.40523466, 0.41932678],
                [0.67170983, 0.46135769]
            ]),
            np.array([
                [0.85925337, 0.59646605],
                [0.85925337, 0.59646605]
            ]),
            np.array([
                [0.38249919, 0.8737707],
                [0.45148745, 0.79845514]
            ]),
        ]

        blocks = BlocksImage(image, 2, 2)

        for index, block in enumerate(blocks):
            np.testing.assert_array_equal(block, expected[index])

    def test_element_modification(self):
        image = np.array([
            [0.98838329, 0.92974977, 0.40523466, 0.41932678],
            [0.40426586, 0.44543487, 0.67170983, 0.46135769],
            [0.85925337, 0.59646605, 0.38249919, 0.8737707],
            [0.85925337, 0.59646605, 0.45148745, 0.79845514]
        ])

        new_block = np.array([
            [0.40426582, 0.92974977],
            [0.40426586, 0.44543487]
        ])

        blocks = BlocksImage(image, 2, 2)
        block = blocks[0]
        block[0][0] = 0.40426582

        np.testing.assert_array_equal(blocks[0], new_block)
